@using CroftBlazorComponents.Services
@using ECommerceProject.Components
@using ECommerceProject.Models
@using Microsoft.AspNetCore.Identity
@using ECommerceProject.Services.Products
@using Microsoft.EntityFrameworkCore
@using ECommerceProject.Services.ProductCategories
@inject IJSRuntime JS

@layout MainLayout

@inject IProductService _productService
@inject IProductCategoryService _productCategoryService
@inject ToastService _toastService
@page "/Products/Add"
@page "/Products/Edit/{ProductId:int}"
<h2 class="text-center">@(EditType == EditTypes.Edit ? $"Product {CurrentProduct.Name}" : "Add Product")</h2>
<EditForm Model="@CurrentProduct" OnValidSubmit="HandleValidSubmit" class="row align-items-center responsive-form">
    <DataAnnotationsValidator />
    <div class="mb-4">
        <div class="col-12 text-center">
            <div class="mb-2">
                <ImagePreview ImageBytes=CurrentProduct.ImageBytes />
            </div>
            <InputFile @ref="InputFileRef" OnChange="HandleImageChange"></InputFile>
        </div>
        <div class="col-auto">
            <label>Name:</label>
            <InputText class="form-control" @bind-Value="CurrentProduct.Name" />
            <ValidationMessage For=@(() => CurrentProduct.Name) />
        </div>
        <div class="col-auto">
            <label>Price:</label>
            <InputNumber class="form-control" @bind-Value="CurrentProduct.Price" />
            <ValidationMessage For=@(() => CurrentProduct.Price) />
        </div>
        <div class="col-auto">
            <BlazorMultiSelectComponent.MultiSelect @bind-Selected=@(CurrentProduct.Categories) Label="Categories" DisplayField=@(nameof(ProductCategory.Name)) Options="AllCategories" />
            <ValidationMessage For=@(() => CurrentProduct.Categories) />
        </div>
    </div>
    <button class="btn btn-success" type="submit">Save</button>
</EditForm>

@code {
    private byte[] _noImageFoundBytes;

    [Parameter]
    public int? ProductId { get; set; }
    private InputFile InputFileRef { get; set; }
    private ElementReference ImagePreviewElement { get; set; }
    private Product CurrentProduct { get; set; } = new();
    private List<ProductCategory> AllCategories { get; set; } = new List<ProductCategory>();
    private int[] SelectedCategories { get; set; } = new int[] { };
    private EditTypes EditType { get; set; } = EditTypes.Edit;
    protected override async Task OnParametersSetAsync()
    {
        AllCategories = await _productCategoryService.GetAll();
        if (ProductId == null)
        {
            EditType = EditTypes.Add;
        }
        else
        {
            CurrentProduct = await _productService.Get(ProductId!.Value);
            EditType = EditTypes.Edit;
        }

        if(_noImageFoundBytes == null || _noImageFoundBytes.Length == 0)
        {
            using(FileStream fs = new FileStream("wwwroot/images/no_image.png", FileMode.Open))
            {
                using (MemoryStream ms = new MemoryStream())
                {
                    await fs.CopyToAsync(ms);
                    _noImageFoundBytes = ms.ToArray();
                }
            }
        }
        await base.OnParametersSetAsync();
    }
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }
    protected async Task HandleImageChange(InputFileChangeEventArgs e)
    {
        CurrentProduct.ImageFile = e.File;
        using (var ms = new MemoryStream())
        {
            await e.File.OpenReadStream().CopyToAsync(ms);
            CurrentProduct.ImageBytes = ms.ToArray();
        }
        await InvokeAsync(StateHasChanged);
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(CurrentProduct.ImageBytes != null && CurrentProduct.ImageBytes.Length > 0)
        {
        }
        await base.OnAfterRenderAsync(firstRender);
    }
    protected async Task HandleValidSubmit()
    {
        if (EditType == EditTypes.Edit)
        {
            await _productService.Update(CurrentProduct);
            _toastService.ShowToast($"Successfully saved changes for {CurrentProduct.Name}!", ToastLevel.Success);
        }
        else if (EditType == EditTypes.Add)
        {
            await _productService.Add(CurrentProduct);
            _toastService.ShowToast($"Successfully created {CurrentProduct.Name}!", ToastLevel.Success);
        }
    }
}
