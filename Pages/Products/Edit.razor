@using CroftBlazorComponents.Services
@using ECommerceProject.Models
@using Microsoft.AspNetCore.Identity
@using ECommerceProject.Services.Products
@using Microsoft.EntityFrameworkCore
@using ECommerceProject.Services.ProductCategories

@layout MainLayout

@inject IProductService _productService
@inject IProductCategoryService _productCategoryService
@inject ToastService _toastService
@page "/Products/Add"
@page "/Products/Edit/{ProductId:int}"

<h2 class="text-center">@(EditType == EditTypes.Edit ? $"Product {CurrentProduct.Name}" : "Add Product")</h2>
<EditForm Model="@CurrentProduct" OnValidSubmit="HandleValidSubmit" class="row align-items-center responsive-form">
    <DataAnnotationsValidator />
    <div class="col-auto">
        <label>Name:</label>
        <InputText class="form-control" @bind-Value="CurrentProduct.Name" />
        <ValidationMessage For=@(() => CurrentProduct.Name) />
    </div>
    <div class="col-auto">
        <label>Price:</label>
        <InputNumber class="form-control" @bind-Value="CurrentProduct.Price" />
        <ValidationMessage For=@(() => CurrentProduct.Price) />
    </div>
    <div class="col-auto">
        <CroftBlazorComponents.MultiSelect.MultiSelect Label="Categories" DisplayField=@(nameof(ProductCategory.Name)) Options="AllCategories" />
    </div>
    <button class="btn btn-success" type="submit">Save</button>
</EditForm>

@code {
    [Parameter]
    public int? ProductId { get; set; }
    private Product CurrentProduct { get; set; } = new();
    private List<ProductCategory> AllCategories { get; set; } = new List<ProductCategory>();
    private int[] SelectedCategories { get; set; } = new int[] { };
    private EditTypes EditType { get; set; } = EditTypes.Edit;
    protected override async Task OnParametersSetAsync()
    {
        AllCategories = await _productCategoryService.GetAll();
        if (ProductId == null)
        {
            EditType = EditTypes.Add;
        }
        else
        {
            EditType = EditTypes.Edit;
        }
        await base.OnParametersSetAsync();
    }
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }
    protected async Task OnCategorySelectChange(int categoryId)
    {
        var foundCategory = AllCategories.Find(x => x.Id == categoryId);
        if(foundCategory != null)
        {
        }
    }
    protected async Task HandleValidSubmit()
    {
        CurrentProduct.Categories = (from category in AllCategories
        join selectedCategoryId in SelectedCategories on category.Id equals selectedCategoryId 
        select category).ToList();
        if (EditType == EditTypes.Edit)
        {
            await _productService.Update(CurrentProduct);
            _toastService.ShowToast($"Successfully saved changes for {CurrentProduct.Name}!", ToastLevel.Success);
        }
        else if (EditType == EditTypes.Add)
        {
            await _productService.Add(CurrentProduct);
            _toastService.ShowToast($"Successfully created {CurrentProduct.Name}!", ToastLevel.Success);
        }
    }
}
