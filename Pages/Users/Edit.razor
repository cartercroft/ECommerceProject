@using CroftBlazorComponents.Services
@using ECommerceProject.Services.Roles
@using Microsoft.AspNetCore.Identity
@using ECommerceProject.Services.UserService
@using Microsoft.EntityFrameworkCore

@layout MainLayout

@inject IUserService _userService
@inject IRoleService _roleService
@inject ToastService _toastService
@page "/Users/Edit/{UserId}"
@page "/Users/Add"

@if (CurrentUser == null)
{
    <div>No user found.</div>
}
else
{
    <h2 class="text-center">Edit User @CurrentUser.UserName</h2>
    <EditForm Model="@CurrentUser" OnValidSubmit="HandleValidSubmit" class="row align-items-center responsive-form">
        <div class="col-auto">
            <label>Email:</label>
            <InputText class="form-control" @bind-Value="CurrentUser.Email" />
            <ValidationMessage For=@(() => CurrentUser.Email) />
        </div>
        <div class="col-auto">
            <label>Username:</label>
            <InputText class="form-control" @bind-Value="CurrentUser.UserName" />
            <ValidationMessage For=@(() => CurrentUser.UserName) />
        </div>
        <BlazorMultiSelectComponent.MultiSelect Label="Roles" DisplayField=@(nameof(IdentityRole.Name)) @bind-Selected=@(UserRoles) Options="AllRoles" />
        <button class="btn btn-success" type="submit">Save</button>
    </EditForm>
}

@code {
    [Parameter]
    public string UserId { get; set; }
    private IdentityUser? CurrentUser { get; set; } = new();
    private ICollection<IdentityRole?> AllRoles { get; set; } = new List<IdentityRole?>();
    private ICollection<IdentityRole> UserRoles { get; set; } = new List<IdentityRole>();
    private EditTypes EditType { get; set; } = new();

    protected override async Task OnParametersSetAsync()
    {
        CurrentUser = await _userService.Get(UserId);

        if (CurrentUser == null)
        {
            CurrentUser = new();
        }
        AllRoles = await _roleService.GetAll();
        UserRoles = await _roleService.GetRolesForUserAsync(CurrentUser);
        await base.OnParametersSetAsync();
    }
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    protected async Task HandleValidSubmit()
    {
        await _userService.Update(CurrentUser);
        await _userService.UpdateRolesForUser(CurrentUser, UserRoles.ToList());
        _toastService.ShowToast($"Successfully saved changes for {CurrentUser.UserName}!", ToastLevel.Success);
    }
}
